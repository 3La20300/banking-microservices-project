# ================================
# APPLICATION CONFIGURATION
# ================================
server.port=8085
server.servlet.context-path=/bff
spring.application.name=bff-service


# External Service URLs
external-services.user-service.base-url=http://localhost:8081
external-services.account-service.base-url=http://localhost:8082
external-services.transaction-service.base-url=http://localhost:8083



# ================================
# DATABASE CONFIGURATION (PostgreSQL)
# ================================
spring.datasource.url=jdbc:postgresql://localhost:5432/vbank_db
spring.datasource.username=vbank_user
spring.datasource.password=vbank_pass
spring.datasource.driver-class-name=org.postgresql.Driver

# ================================
# JPA/HIBERNATE CONFIGURATION
# ================================
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true

# ================================
# KAFKA CONFIGURATION (Spring Boot 3.x)
# ================================
spring.kafka.bootstrap-servers=localhost:9092
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.acks=all
spring.kafka.producer.retries=3
#It avoids duplicate messages when:
#The producer retries after a temporary network failure.
# when your app sends critical messages (e.g., banking transactions, user actions, etc.) and you can?t afford duplicates.
spring.kafka.producer.properties.enable.idempotence=true

# Custom Kafka properties
#A Kafka topic is like a channel or category where messages are published and consumed.
banking.kafka.topic.logging=banking-logs

#Enable AOP
spring.aop.auto=true
# ================================
# LOGGING CONFIGURATION
# ================================
logging.level.com.banking.userservice=DEBUG
logging.level.org.springframework.kafka=INFO
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE
logging.level.org.springframework.web=DEBUG
logging.level.org.springframework.validation=TRACE
logging.level.org.hibernate.validator=DEBUG
logging.level.com.banking=DEBUG

# ================================
# ACTUATOR (Health Checks)
# ================================
management.endpoints.web.exposure.include=health,info,metrics
management.endpoint.health.show-details=always
management.info.env.enabled=true

# ================================
# SECURITY (Spring Boot 3.x)
# ================================
#spring.security.user.name=admin
#spring.security.user.password=admin123
#spring.security.user.roles=ADMIN

# ================================
# VALIDATION
# ================================
spring.jackson.deserialization.fail-on-unknown-properties=false